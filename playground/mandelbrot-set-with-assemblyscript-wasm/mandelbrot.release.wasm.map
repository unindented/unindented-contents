{"version":3,"sources":["~lib/rt/common.ts","mandelbrot.ts"],"names":[],"mappings":"qGCYE,AAAsB,EAAe,KACrC,AAAyB,SAAM,MAG/B,AAAmB,GAAU,YAE7B,AAAmB,AAHA,GAAS,UAGI,AADlB,SAAO,AAAI,AAAI,EAAJ,KAAW,AAAI,EAAJ,oBAGd,AAAK,EAAL,KACpB,AAAW,AAAC,GAAK,GAAc,KAC/B,AAAgB,AAAC,AAAK,EAAL,GAAe,KAE3B,AAAc,MAAG,AAAK,EAAL,KACpB,AAAW,GAAK,GAAQ,KACxB,AAAgB,EAAM,KAEtB,AAAQ,WACR,AAAQ,WACR,AAAS,WACT,AAAS,WACT,AAAqB,MAId,AAA4B,AAAY,EAAZ,GAA5B,AAAW,EAAX,EAAK,OAAZ,EAEE,AAAK,EAAI,KACT,AAAI,AAAM,KAAI,GAAI,KAClB,AAAI,AAHC,EAAI,KAGA,GAAK,KACd,AAAI,AAAa,EAAb,KAGJ,YAMF,AAAiB,EAAY,KAQ7B,AAAW,EAAU,GANjB,AAAY,EAAZ,AADc,EAAI,GAAI,EAAI,SAIf,AAAM,AAtDd,AAAI,AAqD+B,EAAY,IAAI,AADnC,AAAS,IAAa,aACmB,aArDnC,UAsDe,EAAY,aA/BxB,WAJD","sourceRoot":"./mandelbrot.release.wasm","sourcesContent":["// Alignment guarantees\n\n// @ts-ignore: decorator\n@inline export const AL_BITS: u32 = 4; // 16 bytes to fit up to v128\n// @ts-ignore: decorator\n@inline export const AL_SIZE: usize = 1 << <usize>AL_BITS;\n// @ts-ignore: decorator\n@inline export const AL_MASK: usize = AL_SIZE - 1;\n\n// Extra debugging\n\n// @ts-ignore: decorator\n@inline export const DEBUG = true;\n// @ts-ignore: decorator\n@inline export const TRACE = false;\n// @ts-ignore: decorator\n@inline export const RTRACE = isDefined(ASC_RTRACE);\n// @ts-ignore: decorator\n@inline export const PROFILE = isDefined(ASC_PROFILE);\n\n// Memory manager\n\n// ╒════════════ Memory manager block layout (32-bit) ═════════════╕\n//    3                   2                   1\n//  1 0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0  bits\n// ├─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┤\n// │                           MM info                             │ -4\n// ╞>ptr═══════════════════════════════════════════════════════════╡\n// │                              ...                              │\n@unmanaged export class BLOCK {\n  /** Memory manager info. */\n  mmInfo: usize;\n}\n\n/** Overhead of a memory manager block. */\n// @ts-ignore: decorator\n@inline export const BLOCK_OVERHEAD: usize = offsetof<BLOCK>();\n\n/** Maximum size of a memory manager block's payload. */\n// @ts-ignore: decorator\n@inline export const BLOCK_MAXSIZE: usize = (1 << 30) - BLOCK_OVERHEAD;\n\n// Garbage collector\n\n// ╒══════════ Garbage collector object layout (32-bit) ═══════════╕\n//    3                   2                   1\n//  1 0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0  bits\n// ├─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┤\n// │                     Memory manager block                      │ -20\n// ╞═══════════════════════════════════════════════════════════════╡\n// │                            GC info                            │ -16\n// ├───────────────────────────────────────────────────────────────┤\n// │                            GC info                            │ -12\n// ├───────────────────────────────────────────────────────────────┤\n// │                            RT id                              │ -8\n// ├───────────────────────────────────────────────────────────────┤\n// │                            RT size                            │ -4\n// ╞>ptr═══════════════════════════════════════════════════════════╡\n// │                              ...                              │\n@unmanaged export class OBJECT extends BLOCK {\n  /** Garbage collector info. */\n  gcInfo: u32;\n  /** Garbage collector info. */\n  gcInfo2: u32;\n  /** Runtime class id. */\n  rtId: u32;\n  /** Runtime object size. */\n  rtSize: u32;\n}\n\n/** Overhead of a garbage collector object. Excludes memory manager block overhead. */\n// @ts-ignore: decorator\n@inline export const OBJECT_OVERHEAD: usize = (offsetof<OBJECT>() - BLOCK_OVERHEAD + AL_MASK) & ~AL_MASK;\n\n/** Maximum size of a garbage collector object's payload. */\n// @ts-ignore: decorator\n@inline export const OBJECT_MAXSIZE: usize = BLOCK_MAXSIZE - OBJECT_OVERHEAD;\n\n/** Total of memory manager and garbage collector overhead. */\n// @ts-ignore: decorator\n@inline export const TOTAL_OVERHEAD: usize = BLOCK_OVERHEAD + OBJECT_OVERHEAD;\n","function clamp<T>(value: T, minValue: T, maxValue: T): T {\n  return min(max(value, minValue), maxValue);\n}\n\nexport function update(\n  width: u32,\n  height: u32,\n  escapeRadius: f64,\n  maxIterations: u32,\n  extraIterations: u32,\n  numColors: u32\n): void {\n  const escapeRadius2 = escapeRadius * escapeRadius;\n  const invMaxIterations = 1.0 / maxIterations;\n\n  const translateX = width * (1.0 / 1.6);\n  const translateY = height * (1.0 / 2.0);\n  const scale = 10.0 / min(3 * width, 4 * height);\n  const realOffset = translateX * scale;\n\n  for (let py: u32 = 0; py < height; py++) {\n    const y0 = (py - translateY) * scale;\n    const yOffset = (py * width) << 1;\n\n    for (let px: u32 = 0; px < width; px++) {\n      const x0 = px * scale - realOffset;\n      const xOffset = px << 1;\n\n      let x = 0.0;\n      let y = 0.0;\n      let x2 = 0.0;\n      let y2 = 0.0;\n      let iteration: u32 = 0;\n\n      // Iterate until either the escape radius or max iteration is exceeded.\n      // (Do a few extra iterations for quick escapes to reduce error margin.)\n      while (x2 + y2 <= escapeRadius2 || iteration < extraIterations) {\n        x2 = x * x;\n        y2 = y * y;\n        y = 2.0 * x * y + y0;\n        x = x2 - y2 + x0;\n        if (iteration >= maxIterations) {\n          break;\n        }\n        iteration++;\n      }\n\n      // Iteration is a discrete value in the range [0, maxIterations] here, but we'd like it to be\n      // normalized in the range [0, numColors] so it maps to the gradient we computed in JS.\n      // See: http://linas.org/art-gallery/escape/escape.html\n      let colorIndex = numColors - 1;\n      const distance2 = x * x + y * y;\n      if (distance2 > escapeRadius2) {\n        const nu = Math.log2(Math.log(distance2) / 2.0);\n        const fractionalIteration = clamp<f64>((iteration + 1 - nu) * invMaxIterations, 0.0, 1.0);\n        colorIndex = <u32>(fractionalIteration * (numColors - 1));\n      }\n\n      store<u16>(yOffset + xOffset, colorIndex);\n    }\n  }\n}\n"]}